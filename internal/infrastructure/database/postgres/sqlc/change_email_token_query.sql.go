// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: change_email_token_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addChangeEmailToken = `-- name: AddChangeEmailToken :one
INSERT INTO change_email_token (
  token, new_email, user_id, expires_at
) VALUES (
  $1, $2, $3, $4
) RETURNING token, new_email, expires_at, user_id
`

type AddChangeEmailTokenParams struct {
	Token     string
	NewEmail  string
	UserID    pgtype.Int4
	ExpiresAt pgtype.Timestamp
}

func (q *Queries) AddChangeEmailToken(ctx context.Context, arg AddChangeEmailTokenParams) (ChangeEmailToken, error) {
	row := q.db.QueryRow(ctx, addChangeEmailToken,
		arg.Token,
		arg.NewEmail,
		arg.UserID,
		arg.ExpiresAt,
	)
	var i ChangeEmailToken
	err := row.Scan(
		&i.Token,
		&i.NewEmail,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}

const deleteChangeEmailToken = `-- name: DeleteChangeEmailToken :exec
DELETE FROM change_email_token
WHERE token = $1
`

func (q *Queries) DeleteChangeEmailToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteChangeEmailToken, token)
	return err
}

const findChangeEmailToken = `-- name: FindChangeEmailToken :one
SELECT token, new_email, expires_at, user_id FROM change_email_token 
WHERE token = $1
`

func (q *Queries) FindChangeEmailToken(ctx context.Context, token string) (ChangeEmailToken, error) {
	row := q.db.QueryRow(ctx, findChangeEmailToken, token)
	var i ChangeEmailToken
	err := row.Scan(
		&i.Token,
		&i.NewEmail,
		&i.ExpiresAt,
		&i.UserID,
	)
	return i, err
}
