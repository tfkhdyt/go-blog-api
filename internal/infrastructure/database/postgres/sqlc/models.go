// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Role string

const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role
	Valid bool // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

type ChangeEmailToken struct {
	Token     string
	NewEmail  string
	ExpiresAt pgtype.Timestamp
	UserID    pgtype.Int4
}

type RefreshToken struct {
	Token  string
	UserID pgtype.Int4
}

type ResetPasswordToken struct {
	Token     string
	ExpiresAt pgtype.Timestamp
	UserID    pgtype.Int4
}

type User struct {
	ID        int32
	FullName  string
	Username  string
	Email     string
	Password  string
	Role      NullRole
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}
