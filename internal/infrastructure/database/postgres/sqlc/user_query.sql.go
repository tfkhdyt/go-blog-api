// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: user_query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  full_name, username, email, password, role
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, full_name, username, email, role, created_at
`

type CreateUserParams struct {
	FullName string
	Username string
	Email    string
	Password string
	Role     NullRole
}

type CreateUserRow struct {
	ID        int32
	FullName  string
	Username  string
	Email     string
	Role      NullRole
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FullName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findAdmin = `-- name: FindAdmin :many
SELECT id, full_name, username, email, password, role, created_at, updated_at FROM "user"
WHERE role = 'admin'::role
`

func (q *Queries) FindAdmin(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUsers = `-- name: FindAllUsers :many
SELECT id, full_name, username, email, role, created_at, updated_at 
FROM "user"
`

type FindAllUsersRow struct {
	ID        int32
	FullName  string
	Username  string
	Email     string
	Role      NullRole
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) FindAllUsers(ctx context.Context) ([]FindAllUsersRow, error) {
	rows, err := q.db.Query(ctx, findAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindAllUsersRow{}
	for rows.Next() {
		var i FindAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.Email,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findOneUserByEmail = `-- name: FindOneUserByEmail :one
SELECT id, full_name, username, email, password, role, created_at, updated_at FROM "user" 
WHERE email = $1 LIMIT 1
`

func (q *Queries) FindOneUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findOneUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findOneUserByID = `-- name: FindOneUserByID :one
SELECT id, full_name, username, email, password, role, created_at, updated_at FROM "user" 
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindOneUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, findOneUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE "user"
SET 
  email = $2,
  updated_at = $3
WHERE id = $1
RETURNING id, full_name, username, email, role, created_at, updated_at
`

type UpdateEmailParams struct {
	ID        int32
	Email     string
	UpdatedAt pgtype.Timestamp
}

type UpdateEmailRow struct {
	ID        int32
	FullName  string
	Username  string
	Email     string
	Role      NullRole
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (UpdateEmailRow, error) {
	row := q.db.QueryRow(ctx, updateEmail, arg.ID, arg.Email, arg.UpdatedAt)
	var i UpdateEmailRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE "user"
SET 
  password = $2,
  updated_at = $3
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID        int32
	Password  string
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password, arg.UpdatedAt)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET 
  full_name = $2,
  username = $3,
  updated_at = $4
WHERE id = $1
RETURNING id, full_name, username, email, role, created_at, updated_at
`

type UpdateUserParams struct {
	ID        int32
	FullName  string
	Username  string
	UpdatedAt pgtype.Timestamp
}

type UpdateUserRow struct {
	ID        int32
	FullName  string
	Username  string
	Email     string
	Role      NullRole
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FullName,
		arg.Username,
		arg.UpdatedAt,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
